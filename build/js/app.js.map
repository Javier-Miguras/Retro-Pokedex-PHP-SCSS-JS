{"version":3,"sources":["app.js"],"names":["document","addEventListener","querySelector","event","localStorage","clear","position","target","closest","dataset","setItem","lastPosition","getItem","elementoPokemon","scrollIntoView","behavior","performanceNavigation","type","window","location","pathname","endsWith","modalWindow","openModalButton","closeModalButton","preventDefault","showModal","close","typeButtons","querySelectorAll","forEach","typeButton","classList","toggle","resetTypesButton","applyTypesButton","remove","filteredParams","URLSearchParams","search","delete","href","toString","selectedTypes","Array","from","filter","contains","map","textContent","trim","set","join"],"mappings":"AAAAA,SAASC,iBAAiB,oBAAoB,WAE1CD,SAASE,cAAc,gBAAgBD,iBAAiB,SAAS,SAAUE,GAEvEC,aAAaC,QAGb,IAAIC,EAAWH,EAAMI,OAAOC,QAAQ,MAAMC,QAAQH,SAGlDF,aAAaM,QAAQ,eAAgBJ,MAIzC,IAAIK,EAAeP,aAAaQ,QAAQ,gBAGxC,GAAqB,OAAjBD,EAAuB,CAEvB,IAAIE,EAAkBb,SAASE,cAAc,qBAAuBS,EAAe,MAG/EE,IACAA,EAAgBC,eAAe,CAAEC,SAAU,SAC3CX,aAAaC,SAMc,IAA/BW,sBAAsBC,MACtBb,aAAaC,QAIba,OAAOC,SAASC,SAASC,SAAS,cAClCjB,aAAaC,WAOrBL,SAASC,iBAAiB,oBAAoB,WAG1C,MAAMqB,EAActB,SAASE,cAAc,UACrCqB,EAAkBvB,SAASE,cAAc,oBACzCsB,EAAmBxB,SAASE,cAAc,eAEhDqB,EAAgBtB,iBAAiB,QAAUE,IACvCA,EAAMsB,iBACNH,EAAYI,cAGhBF,EAAiBvB,iBAAiB,QAAS,KACvCqB,EAAYK,UAKhB,MAAMC,EAAc5B,SAAS6B,iBAAiB,gBAE9CD,EAAYE,QAASC,IACjBA,EAAW9B,iBAAiB,QAAS,KACjC8B,EAAWC,UAAUC,OAAO,gBAKpC,MAAMC,EAAmBlC,SAASE,cAAc,eAC1CiC,EAAmBnC,SAASE,cAAc,eACvBF,SAASE,cAAc,eAGhDgC,EAAiBjC,iBAAiB,QAAS,KACvC2B,EAAYE,QAASC,IACjBA,EAAWC,UAAUI,OAAO,cAIhC,MAAMC,EAAiB,IAAIC,gBAAgBpB,OAAOC,SAASoB,QAC3DF,EAAeG,OAAO,cAGtBtB,OAAOC,SAASsB,KAAO,KAAKJ,EAAeK,aAI/CP,EAAiBlC,iBAAiB,QAAS,KACvC,MAAM0C,EAAgBC,MAAMC,KAAKjB,GAC5BkB,OAAQf,GAAeA,EAAWC,UAAUe,SAAS,aACrDC,IAAKjB,GAAeA,EAAWkB,YAAYC,QAE1Cb,EAAiB,IAAIC,gBAAgBpB,OAAOC,SAASoB,QAC3DF,EAAec,IAAI,aAAcR,EAAcS,KAAK,MAGpDlC,OAAOC,SAASsB,KAAO,KAAKJ,EAAeK","file":"app.js","sourcesContent":["document.addEventListener(\"DOMContentLoaded\", function () {\r\n    // Al hacer clic en un Pokémon de la lista\r\n    document.querySelector('#pokemonList').addEventListener('click', function (event) {\r\n        // Limpiar el localStorage antes de almacenar una nueva posición\r\n        localStorage.clear();\r\n\r\n        // Obtener la posición actual de la lista\r\n        var position = event.target.closest('li').dataset.position;\r\n\r\n        // Almacenar la posición en localStorage\r\n        localStorage.setItem('lastPosition', position);\r\n    });\r\n\r\n    // Verificar si hay una posición almacenada en localStorage\r\n    var lastPosition = localStorage.getItem('lastPosition');\r\n\r\n    // Si hay una posición almacenada, desplazarse a esa posición\r\n    if (lastPosition !== null) {\r\n        // Encontrar el elemento con el atributo data-position igual a lastPosition\r\n        var elementoPokemon = document.querySelector('li[data-position=\"' + lastPosition + '\"]');\r\n\r\n        // Asegurarse de que el elemento existe antes de intentar desplazarlo\r\n        if (elementoPokemon) {\r\n            elementoPokemon.scrollIntoView({ behavior: 'auto' });\r\n            localStorage.clear();\r\n        }\r\n    }\r\n\r\n    // Limpiar localStorage cuando la pagina se carga por primera vez\r\n\r\n    if (performanceNavigation.type === 1){\r\n        localStorage.clear();\r\n    }\r\n\r\n    // Limpiar localStorage solo cuando se recarga el index.php\r\n    if (window.location.pathname.endsWith('index.php')) {\r\n        localStorage.clear();\r\n    }\r\n\r\n\r\n\r\n});\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n    //Modal\r\n\r\n    const modalWindow = document.querySelector('#modal');\r\n    const openModalButton = document.querySelector('#openModalButton');\r\n    const closeModalButton = document.querySelector('#closeModal');\r\n\r\n    openModalButton.addEventListener('click', (event) => {\r\n        event.preventDefault();\r\n        modalWindow.showModal();\r\n    });\r\n\r\n    closeModalButton.addEventListener('click', () => {\r\n        modalWindow.close();\r\n    });\r\n\r\n    // Type buttons\r\n\r\n    const typeButtons = document.querySelectorAll('.type-button');\r\n\r\n    typeButtons.forEach((typeButton) => {\r\n        typeButton.addEventListener('click', () => {\r\n            typeButton.classList.toggle('selected');\r\n        });\r\n    });\r\n\r\n    // Variables adicionales para el filtrado por tipo\r\n    const resetTypesButton = document.querySelector('#resetTypes');\r\n    const applyTypesButton = document.querySelector('#applyTypes');\r\n    const typeFilterSelect = document.querySelector('#typeFilter');\r\n\r\n    // Restablecer tipos al hacer clic en el botón Reset\r\n    resetTypesButton.addEventListener('click', () => {\r\n        typeButtons.forEach((typeButton) => {\r\n            typeButton.classList.remove('selected');\r\n        });\r\n\r\n        // Quitar los tipos del parámetro en la URL al hacer clic en Reset\r\n        const filteredParams = new URLSearchParams(window.location.search);\r\n        filteredParams.delete('typeFilter');\r\n\r\n        // Redirigir a la página sin tipos en la URL\r\n        window.location.href = `/?${filteredParams.toString()}`;\r\n    });\r\n\r\n    // Aplicar filtro al hacer clic en el botón Apply\r\n    applyTypesButton.addEventListener('click', () => {\r\n        const selectedTypes = Array.from(typeButtons)\r\n            .filter((typeButton) => typeButton.classList.contains('selected'))\r\n            .map((typeButton) => typeButton.textContent.trim());\r\n\r\n        const filteredParams = new URLSearchParams(window.location.search);\r\n        filteredParams.set('typeFilter', selectedTypes.join(','));\r\n\r\n        // Redirigir a la página con los tipos seleccionados como parámetros de la URL\r\n        window.location.href = `/?${filteredParams.toString()}`;\r\n    });\r\n});\r\n\r\n\r\n\r\n"]}